// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 5 files.
  struct file {
    /// Resource file `Colors.realm`.
    static let colorsRealm = FileResource(bundle: _R.hostingBundle, name: "Colors", pathExtension: "realm")
    /// Resource file `NKU.plist`.
    static let nKUPlist = FileResource(bundle: _R.hostingBundle, name: "NKU", pathExtension: "plist")
    /// Resource file `RSA.html`.
    static let rSAHtml = FileResource(bundle: _R.hostingBundle, name: "RSA", pathExtension: "html")
    /// Resource file `slogan.png`.
    static let sloganPng = FileResource(bundle: _R.hostingBundle, name: "slogan", pathExtension: "png")
    /// Resource file `米色白色渐变背景.png`.
    static let 米色白色渐变背景Png = FileResource(bundle: _R.hostingBundle, name: "米色白色渐变背景", pathExtension: "png")
    
    /// `bundle.URLForResource("Colors", withExtension: "realm")`
    static func colorsRealm(_: Void) -> NSURL? {
      let fileResource = R.file.colorsRealm
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("NKU", withExtension: "plist")`
    static func nKUPlist(_: Void) -> NSURL? {
      let fileResource = R.file.nKUPlist
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("RSA", withExtension: "html")`
    static func rSAHtml(_: Void) -> NSURL? {
      let fileResource = R.file.rSAHtml
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("slogan", withExtension: "png")`
    static func sloganPng(_: Void) -> NSURL? {
      let fileResource = R.file.sloganPng
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("米色白色渐变背景", withExtension: "png")`
    static func 米色白色渐变背景Png(_: Void) -> NSURL? {
      let fileResource = R.file.米色白色渐变背景Png
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 29 images.
  struct image {
    /// Image `book`.
    static let book = ImageResource(bundle: _R.hostingBundle, name: "book")
    /// Image `building`.
    static let building = ImageResource(bundle: _R.hostingBundle, name: "building")
    /// Image `buttonNormal`.
    static let buttonNormal = ImageResource(bundle: _R.hostingBundle, name: "buttonNormal")
    /// Image `check`.
    static let check = ImageResource(bundle: _R.hostingBundle, name: "check")
    /// Image `CheckBox`.
    static let checkBox = ImageResource(bundle: _R.hostingBundle, name: "CheckBox")
    /// Image `CheckedBox`.
    static let checkedBox = ImageResource(bundle: _R.hostingBundle, name: "CheckedBox")
    /// Image `classEvaluated`.
    static let classEvaluated = ImageResource(bundle: _R.hostingBundle, name: "classEvaluated")
    /// Image `classNotEvaluated`.
    static let classNotEvaluated = ImageResource(bundle: _R.hostingBundle, name: "classNotEvaluated")
    /// Image `Clock`.
    static let clock = ImageResource(bundle: _R.hostingBundle, name: "Clock")
    /// Image `Course`.
    static let course = ImageResource(bundle: _R.hostingBundle, name: "Course")
    /// Image `downArrow`.
    static let downArrow = ImageResource(bundle: _R.hostingBundle, name: "downArrow")
    /// Image `evaluate`.
    static let evaluate = ImageResource(bundle: _R.hostingBundle, name: "evaluate")
    /// Image `GeneralTask`.
    static let generalTask = ImageResource(bundle: _R.hostingBundle, name: "GeneralTask")
    /// Image `gradeGet`.
    static let gradeGet = ImageResource(bundle: _R.hostingBundle, name: "gradeGet")
    /// Image `Homework`.
    static let homework = ImageResource(bundle: _R.hostingBundle, name: "Homework")
    /// Image `leftArrow`.
    static let leftArrow = ImageResource(bundle: _R.hostingBundle, name: "leftArrow")
    /// Image `moreFunction`.
    static let moreFunction = ImageResource(bundle: _R.hostingBundle, name: "moreFunction")
    /// Image `notiCenter`.
    static let notiCenter = ImageResource(bundle: _R.hostingBundle, name: "notiCenter")
    /// Image `plus`.
    static let plus = ImageResource(bundle: _R.hostingBundle, name: "plus")
    /// Image `rightArrow`.
    static let rightArrow = ImageResource(bundle: _R.hostingBundle, name: "rightArrow")
    /// Image `selectCourse`.
    static let selectCourse = ImageResource(bundle: _R.hostingBundle, name: "selectCourse")
    /// Image `slogan`.
    static let slogan = ImageResource(bundle: _R.hostingBundle, name: "slogan")
    /// Image `watch`.
    static let watch = ImageResource(bundle: _R.hostingBundle, name: "watch")
    /// Image `今天`.
    static let 今天 = ImageResource(bundle: _R.hostingBundle, name: "今天")
    /// Image `功能`.
    static let 功能 = ImageResource(bundle: _R.hostingBundle, name: "功能")
    /// Image `南开`.
    static let 南开 = ImageResource(bundle: _R.hostingBundle, name: "南开")
    /// Image `米色白色渐变背景`.
    static let 米色白色渐变背景 = ImageResource(bundle: _R.hostingBundle, name: "米色白色渐变背景")
    /// Image `设置`.
    static let 设置 = ImageResource(bundle: _R.hostingBundle, name: "设置")
    /// Image `课程`.
    static let 课程 = ImageResource(bundle: _R.hostingBundle, name: "课程")
    
    /// `UIImage(named: "book", bundle: ..., traitCollection: ...)`
    static func book(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.book, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "building", bundle: ..., traitCollection: ...)`
    static func building(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.building, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "buttonNormal", bundle: ..., traitCollection: ...)`
    static func buttonNormal(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.buttonNormal, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.check, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "CheckBox", bundle: ..., traitCollection: ...)`
    static func checkBox(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.checkBox, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "CheckedBox", bundle: ..., traitCollection: ...)`
    static func checkedBox(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.checkedBox, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "classEvaluated", bundle: ..., traitCollection: ...)`
    static func classEvaluated(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.classEvaluated, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "classNotEvaluated", bundle: ..., traitCollection: ...)`
    static func classNotEvaluated(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.classNotEvaluated, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Clock", bundle: ..., traitCollection: ...)`
    static func clock(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.clock, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Course", bundle: ..., traitCollection: ...)`
    static func course(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.course, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "downArrow", bundle: ..., traitCollection: ...)`
    static func downArrow(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.downArrow, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "evaluate", bundle: ..., traitCollection: ...)`
    static func evaluate(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.evaluate, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "GeneralTask", bundle: ..., traitCollection: ...)`
    static func generalTask(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.generalTask, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "gradeGet", bundle: ..., traitCollection: ...)`
    static func gradeGet(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.gradeGet, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Homework", bundle: ..., traitCollection: ...)`
    static func homework(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.homework, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "leftArrow", bundle: ..., traitCollection: ...)`
    static func leftArrow(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.leftArrow, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "moreFunction", bundle: ..., traitCollection: ...)`
    static func moreFunction(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.moreFunction, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "notiCenter", bundle: ..., traitCollection: ...)`
    static func notiCenter(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.notiCenter, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.plus, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "rightArrow", bundle: ..., traitCollection: ...)`
    static func rightArrow(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.rightArrow, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "selectCourse", bundle: ..., traitCollection: ...)`
    static func selectCourse(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.selectCourse, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "slogan", bundle: ..., traitCollection: ...)`
    static func slogan(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.slogan, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "watch", bundle: ..., traitCollection: ...)`
    static func watch(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.watch, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "今天", bundle: ..., traitCollection: ...)`
    static func 今天(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.今天, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "功能", bundle: ..., traitCollection: ...)`
    static func 功能(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.功能, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "南开", bundle: ..., traitCollection: ...)`
    static func 南开(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.南开, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "米色白色渐变背景", bundle: ..., traitCollection: ...)`
    static func 米色白色渐变背景(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.米色白色渐变背景, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "设置", bundle: ..., traitCollection: ...)`
    static func 设置(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.设置, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "课程", bundle: ..., traitCollection: ...)`
    static func 课程(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.课程, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `ClassView`.
    static let classView = _R.nib._ClassView()
    /// Nib `TimeScheduleView`.
    static let timeScheduleView = _R.nib._TimeScheduleView()
    /// Nib `WeekdayView`.
    static let weekdayView = _R.nib._WeekdayView()
    
    /// `UINib(name: "ClassView", bundle: ...)`
    static func classView(_: Void) -> UINib {
      return UINib(resource: R.nib.classView)
    }
    
    /// `UINib(name: "TimeScheduleView", bundle: ...)`
    static func timeScheduleView(_: Void) -> UINib {
      return UINib(resource: R.nib.timeScheduleView)
    }
    
    /// `UINib(name: "WeekdayView", bundle: ...)`
    static func weekdayView(_: Void) -> UINib {
      return UINib(resource: R.nib.weekdayView)
    }
    
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 35 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AboutCell`.
    static let aboutCell: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "AboutCell")
    /// Reuse identifier `AccountCell`.
    static let accountCell: ReuseIdentifier<AccountTableViewCell> = ReuseIdentifier(identifier: "AccountCell")
    /// Reuse identifier `AccountInfoCell`.
    static let accountInfoCell: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "AccountInfoCell")
    /// Reuse identifier `AddAccountCell`.
    static let addAccountCell: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "AddAccountCell")
    /// Reuse identifier `ChooseClassTimeTablePreferenceCell`.
    static let chooseClassTimeTablePreferenceCell: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "ChooseClassTimeTablePreferenceCell")
    /// Reuse identifier `ChooseDueDateCell`.
    static let chooseDueDateCell: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "ChooseDueDateCell")
    /// Reuse identifier `ChoosePreferredColorCell`.
    static let choosePreferredColorCell: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "ChoosePreferredColorCell")
    /// Reuse identifier `classDetailInfo`.
    static let classDetailInfo: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "classDetailInfo")
    /// Reuse identifier `classInfo`.
    static let classInfo: ReuseIdentifier<ClassInfoTableViewCell> = ReuseIdentifier(identifier: "classInfo")
    /// Reuse identifier `classModification`.
    static let classModification: ReuseIdentifier<ClassModificationTableViewCell> = ReuseIdentifier(identifier: "classModification")
    /// Reuse identifier `ClassTimeTablePreferenceCell`.
    static let classTimeTablePreferenceCell: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "ClassTimeTablePreferenceCell")
    /// Reuse identifier `ClassToEvaluateCell`.
    static let classToEvaluateCell: ReuseIdentifier<ClassToEvaluateTableViewCell> = ReuseIdentifier(identifier: "ClassToEvaluateCell")
    /// Reuse identifier `CourseColorCell`.
    static let courseColorCell: ReuseIdentifier<ColorChooseTableViewCell> = ReuseIdentifier(identifier: "CourseColorCell")
    /// Reuse identifier `CourseDetailCell`.
    static let courseDetailCell: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "CourseDetailCell")
    /// Reuse identifier `CourseTaskCell`.
    static let courseTaskCell: ReuseIdentifier<CourseTaskCell> = ReuseIdentifier(identifier: "CourseTaskCell")
    /// Reuse identifier `EvaluateCenterCell`.
    static let evaluateCenterCell: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "EvaluateCenterCell")
    /// Reuse identifier `EvaluateDetailCell`.
    static let evaluateDetailCell: ReuseIdentifier<EvaluateDetailTableViewCell> = ReuseIdentifier(identifier: "EvaluateDetailCell")
    /// Reuse identifier `EvaluateOpinionCell`.
    static let evaluateOpinionCell: ReuseIdentifier<EvaluateOpinionTableViewCell> = ReuseIdentifier(identifier: "EvaluateOpinionCell")
    /// Reuse identifier `EvaluateSubmitCell`.
    static let evaluateSubmitCell: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "EvaluateSubmitCell")
    /// Reuse identifier `GPACalculateMethodCell`.
    static let gPACalculateMethodCell: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "GPACalculateMethodCell")
    /// Reuse identifier `GPACell`.
    static let gPACell: ReuseIdentifier<GPACell> = ReuseIdentifier(identifier: "GPACell")
    /// Reuse identifier `GeneralTaskCell`.
    static let generalTaskCell: ReuseIdentifier<GeneralTaskCell> = ReuseIdentifier(identifier: "GeneralTaskCell")
    /// Reuse identifier `GradeCell`.
    static let gradeCell: ReuseIdentifier<GradeCell> = ReuseIdentifier(identifier: "GradeCell")
    /// Reuse identifier `GradeShowerCell`.
    static let gradeShowerCell: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "GradeShowerCell")
    /// Reuse identifier `LogOutCell`.
    static let logOutCell: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "LogOutCell")
    /// Reuse identifier `MoreFunctionCell`.
    static let moreFunctionCell: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "MoreFunctionCell")
    /// Reuse identifier `NotiCell`.
    static let notiCell: ReuseIdentifier<NotiTableViewCell> = ReuseIdentifier(identifier: "NotiCell")
    /// Reuse identifier `NotiCenterCell`.
    static let notiCenterCell: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "NotiCenterCell")
    /// Reuse identifier `PreferredColorCell`.
    static let preferredColorCell: ReuseIdentifier<ColorChooseTableViewCell> = ReuseIdentifier(identifier: "PreferredColorCell")
    /// Reuse identifier `SelectCourseCenterCell`.
    static let selectCourseCenterCell: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "SelectCourseCenterCell")
    /// Reuse identifier `SupportGroupCell`.
    static let supportGroupCell: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "SupportGroupCell")
    /// Reuse identifier `TaskColorCell`.
    static let taskColorCell: ReuseIdentifier<ColorChooseTableViewCell> = ReuseIdentifier(identifier: "TaskColorCell")
    /// Reuse identifier `TestTimeCell`.
    static let testTimeCell: ReuseIdentifier<TestTimeTableViewCell> = ReuseIdentifier(identifier: "TestTimeCell")
    /// Reuse identifier `TestTimeSearchCell`.
    static let testTimeSearchCell: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "TestTimeSearchCell")
    /// Reuse identifier `TodayCourseCell`.
    static let todayCourseCell: ReuseIdentifier<TodayCourseCell> = ReuseIdentifier(identifier: "TodayCourseCell")
    
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 12 view controllers.
  struct segue {
    /// This struct is generated for `ClassTimeViewController`, and contains static references to 2 segues.
    struct classTimeViewController {
      /// Segue identifier `Login`.
      static let login: StoryboardSegueIdentifier<UIStoryboardSegue, ClassTimeViewController, UINavigationController> = StoryboardSegueIdentifier(identifier: "Login")
      /// Segue identifier `ShowCourseDetail`.
      static let showCourseDetail: StoryboardSegueIdentifier<UIStoryboardSegue, ClassTimeViewController, CourseDetailTableViewController> = StoryboardSegueIdentifier(identifier: "ShowCourseDetail")
      
      /// Optionally returns a typed version of segue `Login`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func login(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, ClassTimeViewController, UINavigationController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.classTimeViewController.login, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowCourseDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showCourseDetail(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, ClassTimeViewController, CourseDetailTableViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.classTimeViewController.showCourseDetail, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `CourseDetailTableViewController`, and contains static references to 1 segues.
    struct courseDetailTableViewController {
      /// Segue identifier `AddTask`.
      static let addTask: StoryboardSegueIdentifier<UIStoryboardSegue, CourseDetailTableViewController, UINavigationController> = StoryboardSegueIdentifier(identifier: "AddTask")
      
      /// Optionally returns a typed version of segue `AddTask`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func addTask(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, CourseDetailTableViewController, UINavigationController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.courseDetailTableViewController.addTask, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `EvaluateTableViewController`, and contains static references to 2 segues.
    struct evaluateTableViewController {
      /// Segue identifier `Login`.
      static let login: StoryboardSegueIdentifier<UIStoryboardSegue, EvaluateTableViewController, UINavigationController> = StoryboardSegueIdentifier(identifier: "Login")
      /// Segue identifier `ShowEvaluateDetail`.
      static let showEvaluateDetail: StoryboardSegueIdentifier<UIStoryboardSegue, EvaluateTableViewController, EvaluateDetailTableViewController> = StoryboardSegueIdentifier(identifier: "ShowEvaluateDetail")
      
      /// Optionally returns a typed version of segue `Login`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func login(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, EvaluateTableViewController, UINavigationController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.evaluateTableViewController.login, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowEvaluateDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showEvaluateDetail(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, EvaluateTableViewController, EvaluateDetailTableViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.evaluateTableViewController.showEvaluateDetail, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `FunctionTableViewController`, and contains static references to 5 segues.
    struct functionTableViewController {
      /// Segue identifier `ShowEvaluate`.
      static let showEvaluate: StoryboardSegueIdentifier<UIStoryboardSegue, FunctionTableViewController, EvaluateTableViewController> = StoryboardSegueIdentifier(identifier: "ShowEvaluate")
      /// Segue identifier `ShowGrade`.
      static let showGrade: StoryboardSegueIdentifier<UIStoryboardSegue, FunctionTableViewController, GradeShowerTableViewController> = StoryboardSegueIdentifier(identifier: "ShowGrade")
      /// Segue identifier `ShowNotiCenter`.
      static let showNotiCenter: StoryboardSegueIdentifier<UIStoryboardSegue, FunctionTableViewController, NotiCenterTableViewController> = StoryboardSegueIdentifier(identifier: "ShowNotiCenter")
      /// Segue identifier `ShowSelectCourse`.
      static let showSelectCourse: StoryboardSegueIdentifier<UIStoryboardSegue, FunctionTableViewController, SelectCourseTableViewController> = StoryboardSegueIdentifier(identifier: "ShowSelectCourse")
      /// Segue identifier `ShowTestTime`.
      static let showTestTime: StoryboardSegueIdentifier<UIStoryboardSegue, FunctionTableViewController, TestTimeTableViewController> = StoryboardSegueIdentifier(identifier: "ShowTestTime")
      
      /// Optionally returns a typed version of segue `ShowEvaluate`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showEvaluate(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, FunctionTableViewController, EvaluateTableViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.functionTableViewController.showEvaluate, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowGrade`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGrade(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, FunctionTableViewController, GradeShowerTableViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.functionTableViewController.showGrade, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowNotiCenter`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showNotiCenter(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, FunctionTableViewController, NotiCenterTableViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.functionTableViewController.showNotiCenter, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowSelectCourse`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSelectCourse(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, FunctionTableViewController, SelectCourseTableViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.functionTableViewController.showSelectCourse, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowTestTime`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showTestTime(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, FunctionTableViewController, TestTimeTableViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.functionTableViewController.showTestTime, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `GradeShowerTableViewController`, and contains static references to 2 segues.
    struct gradeShowerTableViewController {
      /// Segue identifier `Login`.
      static let login: StoryboardSegueIdentifier<UIStoryboardSegue, GradeShowerTableViewController, UINavigationController> = StoryboardSegueIdentifier(identifier: "Login")
      /// Segue identifier `ShowGPACalculateMethod`.
      static let showGPACalculateMethod: StoryboardSegueIdentifier<UIStoryboardSegue, GradeShowerTableViewController, GPACalculateMethodTableViewController> = StoryboardSegueIdentifier(identifier: "ShowGPACalculateMethod")
      
      /// Optionally returns a typed version of segue `Login`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func login(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, GradeShowerTableViewController, UINavigationController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.gradeShowerTableViewController.login, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowGPACalculateMethod`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGPACalculateMethod(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, GradeShowerTableViewController, GPACalculateMethodTableViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.gradeShowerTableViewController.showGPACalculateMethod, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `NewTaskTableViewController`, and contains static references to 1 segues.
    struct newTaskTableViewController {
      /// Segue identifier `ChooseDueDate`.
      static let chooseDueDate: StoryboardSegueIdentifier<UIStoryboardSegue, NewTaskTableViewController, DatePickerTableViewController> = StoryboardSegueIdentifier(identifier: "ChooseDueDate")
      
      /// Optionally returns a typed version of segue `ChooseDueDate`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func chooseDueDate(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, NewTaskTableViewController, DatePickerTableViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.newTaskTableViewController.chooseDueDate, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `NotiCenterTableViewController`, and contains static references to 1 segues.
    struct notiCenterTableViewController {
      /// Segue identifier `ShowNotiDetail`.
      static let showNotiDetail: StoryboardSegueIdentifier<UIStoryboardSegue, NotiCenterTableViewController, NotiDetailViewController> = StoryboardSegueIdentifier(identifier: "ShowNotiDetail")
      
      /// Optionally returns a typed version of segue `ShowNotiDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showNotiDetail(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, NotiCenterTableViewController, NotiDetailViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.notiCenterTableViewController.showNotiDetail, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `SearchCourseTableViewController`, and contains static references to 1 segues.
    struct searchCourseTableViewController {
      /// Segue identifier `searchCourseDetail`.
      static let searchCourseDetail: StoryboardSegueIdentifier<UIStoryboardSegue, SearchCourseTableViewController, SearchCourseDetailTableViewController> = StoryboardSegueIdentifier(identifier: "searchCourseDetail")
      
      /// Optionally returns a typed version of segue `searchCourseDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func searchCourseDetail(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, SearchCourseTableViewController, SearchCourseDetailTableViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchCourseTableViewController.searchCourseDetail, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `SelectCourseTableViewController`, and contains static references to 2 segues.
    struct selectCourseTableViewController {
      /// Segue identifier `Login`.
      static let login: StoryboardSegueIdentifier<UIStoryboardSegue, SelectCourseTableViewController, UINavigationController> = StoryboardSegueIdentifier(identifier: "Login")
      /// Segue identifier `ShowClassSearchDetail`.
      static let showClassSearchDetail: StoryboardSegueIdentifier<UIStoryboardSegue, SelectCourseTableViewController, SearchCourseTableViewController> = StoryboardSegueIdentifier(identifier: "ShowClassSearchDetail")
      
      /// Optionally returns a typed version of segue `Login`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func login(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, SelectCourseTableViewController, UINavigationController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.selectCourseTableViewController.login, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowClassSearchDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showClassSearchDetail(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, SelectCourseTableViewController, SearchCourseTableViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.selectCourseTableViewController.showClassSearchDetail, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `SettingTableViewController`, and contains static references to 4 segues.
    struct settingTableViewController {
      /// Segue identifier `ShowAbout`.
      static let showAbout: StoryboardSegueIdentifier<UIStoryboardSegue, SettingTableViewController, AboutViewController> = StoryboardSegueIdentifier(identifier: "ShowAbout")
      /// Segue identifier `ShowChoosePreferredColor`.
      static let showChoosePreferredColor: StoryboardSegueIdentifier<UIStoryboardSegue, SettingTableViewController, ColorChooseTableViewController> = StoryboardSegueIdentifier(identifier: "ShowChoosePreferredColor")
      /// Segue identifier `ShowClassTimePreference`.
      static let showClassTimePreference: StoryboardSegueIdentifier<UIStoryboardSegue, SettingTableViewController, ClassTimePreferenceTableViewController> = StoryboardSegueIdentifier(identifier: "ShowClassTimePreference")
      /// Segue identifier `ShowDetailAccountInfo`.
      static let showDetailAccountInfo: StoryboardSegueIdentifier<UIStoryboardSegue, SettingTableViewController, DetailAccountInfoTableViewController> = StoryboardSegueIdentifier(identifier: "ShowDetailAccountInfo")
      
      /// Optionally returns a typed version of segue `ShowAbout`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showAbout(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, SettingTableViewController, AboutViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingTableViewController.showAbout, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowChoosePreferredColor`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showChoosePreferredColor(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, SettingTableViewController, ColorChooseTableViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingTableViewController.showChoosePreferredColor, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowClassTimePreference`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showClassTimePreference(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, SettingTableViewController, ClassTimePreferenceTableViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingTableViewController.showClassTimePreference, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowDetailAccountInfo`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showDetailAccountInfo(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, SettingTableViewController, DetailAccountInfoTableViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingTableViewController.showDetailAccountInfo, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `TestTimeTableViewController`, and contains static references to 1 segues.
    struct testTimeTableViewController {
      /// Segue identifier `Login`.
      static let login: StoryboardSegueIdentifier<UIStoryboardSegue, TestTimeTableViewController, UINavigationController> = StoryboardSegueIdentifier(identifier: "Login")
      
      /// Optionally returns a typed version of segue `Login`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func login(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, TestTimeTableViewController, UINavigationController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.testTimeTableViewController.login, segue: segue)
      }
      
      private init() {}
    }
    
    /// This struct is generated for `TodayViewController`, and contains static references to 3 segues.
    struct todayViewController {
      /// Segue identifier `AddTask`.
      static let addTask: StoryboardSegueIdentifier<UIStoryboardSegue, TodayViewController, UINavigationController> = StoryboardSegueIdentifier(identifier: "AddTask")
      /// Segue identifier `Login`.
      static let login: StoryboardSegueIdentifier<UIStoryboardSegue, TodayViewController, SaveAccountInfoViewController> = StoryboardSegueIdentifier(identifier: "Login")
      /// Segue identifier `ShowCourseDetail`.
      static let showCourseDetail: StoryboardSegueIdentifier<UIStoryboardSegue, TodayViewController, CourseDetailTableViewController> = StoryboardSegueIdentifier(identifier: "ShowCourseDetail")
      
      /// Optionally returns a typed version of segue `AddTask`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func addTask(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, TodayViewController, UINavigationController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.todayViewController.addTask, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Login`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func login(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, TodayViewController, SaveAccountInfoViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.todayViewController.login, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowCourseDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showCourseDetail(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, TodayViewController, CourseDetailTableViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.todayViewController.showCourseDetail, segue: segue)
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 12 storyboards.
  struct storyboard {
    /// Storyboard `ClassTime`.
    static let classTime = _R.storyboard.classTime()
    /// Storyboard `Evaluate`.
    static let evaluate = _R.storyboard.evaluate()
    /// Storyboard `Function`.
    static let function = _R.storyboard.function()
    /// Storyboard `Grade`.
    static let grade = _R.storyboard.grade()
    /// Storyboard `Launch`.
    static let launch = _R.storyboard.launch()
    /// Storyboard `LogIn`.
    static let logIn = _R.storyboard.logIn()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `NotiCenter`.
    static let notiCenter = _R.storyboard.notiCenter()
    /// Storyboard `SelectCourse`.
    static let selectCourse = _R.storyboard.selectCourse()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `TestTimeSearch`.
    static let testTimeSearch = _R.storyboard.testTimeSearch()
    /// Storyboard `Today`.
    static let today = _R.storyboard.today()
    
    /// `UIStoryboard(name: "ClassTime", bundle: ...)`
    static func classTime(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.classTime)
    }
    
    /// `UIStoryboard(name: "Evaluate", bundle: ...)`
    static func evaluate(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.evaluate)
    }
    
    /// `UIStoryboard(name: "Function", bundle: ...)`
    static func function(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.function)
    }
    
    /// `UIStoryboard(name: "Grade", bundle: ...)`
    static func grade(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.grade)
    }
    
    /// `UIStoryboard(name: "Launch", bundle: ...)`
    static func launch(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launch)
    }
    
    /// `UIStoryboard(name: "LogIn", bundle: ...)`
    static func logIn(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.logIn)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "NotiCenter", bundle: ...)`
    static func notiCenter(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.notiCenter)
    }
    
    /// `UIStoryboard(name: "SelectCourse", bundle: ...)`
    static func selectCourse(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.selectCourse)
    }
    
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.settings)
    }
    
    /// `UIStoryboard(name: "TestTimeSearch", bundle: ...)`
    static func testTimeSearch(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.testTimeSearch)
    }
    
    /// `UIStoryboard(name: "Today", bundle: ...)`
    static func today(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.today)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 0 localization keys.
    struct localizable {
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(NSLocale.init) ?? NSLocale.currentLocale()
  static let hostingBundle = NSBundle(identifier: "April-Sunshine.NKU-Helper") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _ClassView: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "ClassView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ClassView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? ClassView
      }
      
      private init() {}
    }
    
    struct _TimeScheduleView: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "TimeScheduleView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TimeScheduleView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? TimeScheduleView
      }
      
      private init() {}
    }
    
    struct _WeekdayView: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "WeekdayView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> WeekdayView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? WeekdayView
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try classTime.validate()
      try selectCourse.validate()
      try function.validate()
      try today.validate()
      try testTimeSearch.validate()
      try grade.validate()
      try logIn.validate()
      try notiCenter.validate()
      try settings.validate()
      try evaluate.validate()
    }
    
    struct classTime: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let classTimeNC = StoryboardViewControllerResource<UINavigationController>(identifier: "ClassTimeNC")
      let classTimeVC = StoryboardViewControllerResource<ClassTimeViewController>(identifier: "ClassTimeVC")
      let name = "ClassTime"
      
      func classTimeNC(_: Void) -> UINavigationController? {
        return UIStoryboard(resource: self).instantiateViewController(classTimeNC)
      }
      
      func classTimeVC(_: Void) -> ClassTimeViewController? {
        return UIStoryboard(resource: self).instantiateViewController(classTimeVC)
      }
      
      static func validate() throws {
        if UIImage(named: "课程") == nil { throw ValidationError(description: "[R.swift] Image named '课程' is used in storyboard 'ClassTime', but couldn't be loaded.") }
        if _R.storyboard.classTime().classTimeVC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'classTimeVC' could not be loaded from storyboard 'ClassTime' as 'ClassTimeViewController'.") }
        if _R.storyboard.classTime().classTimeNC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'classTimeNC' could not be loaded from storyboard 'ClassTime' as 'UINavigationController'.") }
      }
      
      private init() {}
    }
    
    struct evaluate: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = EvaluateTableViewController
      
      let bundle = _R.hostingBundle
      let evaluateDetailTVC = StoryboardViewControllerResource<EvaluateDetailTableViewController>(identifier: "EvaluateDetailTVC")
      let evaluateTVC = StoryboardViewControllerResource<EvaluateTableViewController>(identifier: "EvaluateTVC")
      let name = "Evaluate"
      
      func evaluateDetailTVC(_: Void) -> EvaluateDetailTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(evaluateDetailTVC)
      }
      
      func evaluateTVC(_: Void) -> EvaluateTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(evaluateTVC)
      }
      
      static func validate() throws {
        if UIImage(named: "classEvaluated") == nil { throw ValidationError(description: "[R.swift] Image named 'classEvaluated' is used in storyboard 'Evaluate', but couldn't be loaded.") }
        if _R.storyboard.evaluate().evaluateTVC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'evaluateTVC' could not be loaded from storyboard 'Evaluate' as 'EvaluateTableViewController'.") }
        if _R.storyboard.evaluate().evaluateDetailTVC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'evaluateDetailTVC' could not be loaded from storyboard 'Evaluate' as 'EvaluateDetailTableViewController'.") }
      }
      
      private init() {}
    }
    
    struct function: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let functionNC = StoryboardViewControllerResource<UINavigationController>(identifier: "FunctionNC")
      let functionVC = StoryboardViewControllerResource<FunctionTableViewController>(identifier: "FunctionVC")
      let name = "Function"
      
      func functionNC(_: Void) -> UINavigationController? {
        return UIStoryboard(resource: self).instantiateViewController(functionNC)
      }
      
      func functionVC(_: Void) -> FunctionTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(functionVC)
      }
      
      static func validate() throws {
        if UIImage(named: "book") == nil { throw ValidationError(description: "[R.swift] Image named 'book' is used in storyboard 'Function', but couldn't be loaded.") }
        if UIImage(named: "selectCourse") == nil { throw ValidationError(description: "[R.swift] Image named 'selectCourse' is used in storyboard 'Function', but couldn't be loaded.") }
        if UIImage(named: "gradeGet") == nil { throw ValidationError(description: "[R.swift] Image named 'gradeGet' is used in storyboard 'Function', but couldn't be loaded.") }
        if UIImage(named: "功能") == nil { throw ValidationError(description: "[R.swift] Image named '功能' is used in storyboard 'Function', but couldn't be loaded.") }
        if UIImage(named: "evaluate") == nil { throw ValidationError(description: "[R.swift] Image named 'evaluate' is used in storyboard 'Function', but couldn't be loaded.") }
        if UIImage(named: "moreFunction") == nil { throw ValidationError(description: "[R.swift] Image named 'moreFunction' is used in storyboard 'Function', but couldn't be loaded.") }
        if UIImage(named: "notiCenter") == nil { throw ValidationError(description: "[R.swift] Image named 'notiCenter' is used in storyboard 'Function', but couldn't be loaded.") }
        if _R.storyboard.function().functionVC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'functionVC' could not be loaded from storyboard 'Function' as 'FunctionTableViewController'.") }
        if _R.storyboard.function().functionNC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'functionNC' could not be loaded from storyboard 'Function' as 'UINavigationController'.") }
      }
      
      private init() {}
    }
    
    struct grade: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = GradeShowerTableViewController
      
      let bundle = _R.hostingBundle
      let gradeShowerTVC = StoryboardViewControllerResource<GradeShowerTableViewController>(identifier: "GradeShowerTVC")
      let name = "Grade"
      
      func gradeShowerTVC(_: Void) -> GradeShowerTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(gradeShowerTVC)
      }
      
      static func validate() throws {
        if _R.storyboard.grade().gradeShowerTVC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'gradeShowerTVC' could not be loaded from storyboard 'Grade' as 'GradeShowerTableViewController'.") }
      }
      
      private init() {}
    }
    
    struct launch: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "Launch"
      
      private init() {}
    }
    
    struct logIn: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let logInVC = StoryboardViewControllerResource<LogInViewController>(identifier: "LogInVC")
      let name = "LogIn"
      
      func logInVC(_: Void) -> LogInViewController? {
        return UIStoryboard(resource: self).instantiateViewController(logInVC)
      }
      
      static func validate() throws {
        if UIImage(named: "米色白色渐变背景.png") == nil { throw ValidationError(description: "[R.swift] Image named '米色白色渐变背景.png' is used in storyboard 'LogIn', but couldn't be loaded.") }
        if UIImage(named: "slogan.png") == nil { throw ValidationError(description: "[R.swift] Image named 'slogan.png' is used in storyboard 'LogIn', but couldn't be loaded.") }
        if _R.storyboard.logIn().logInVC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'logInVC' could not be loaded from storyboard 'LogIn' as 'LogInViewController'.") }
      }
      
      private init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UITabBarController
      
      let bundle = _R.hostingBundle
      let name = "Main"
      
      private init() {}
    }
    
    struct notiCenter: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NotiCenterTableViewController
      
      let bundle = _R.hostingBundle
      let name = "NotiCenter"
      let notiCenterTVC = StoryboardViewControllerResource<NotiCenterTableViewController>(identifier: "NotiCenterTVC")
      let notiDetailVC = StoryboardViewControllerResource<NotiDetailViewController>(identifier: "NotiDetailVC")
      
      func notiCenterTVC(_: Void) -> NotiCenterTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(notiCenterTVC)
      }
      
      func notiDetailVC(_: Void) -> NotiDetailViewController? {
        return UIStoryboard(resource: self).instantiateViewController(notiDetailVC)
      }
      
      static func validate() throws {
        if UIImage(named: "南开") == nil { throw ValidationError(description: "[R.swift] Image named '南开' is used in storyboard 'NotiCenter', but couldn't be loaded.") }
        if _R.storyboard.notiCenter().notiCenterTVC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'notiCenterTVC' could not be loaded from storyboard 'NotiCenter' as 'NotiCenterTableViewController'.") }
        if _R.storyboard.notiCenter().notiDetailVC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'notiDetailVC' could not be loaded from storyboard 'NotiCenter' as 'NotiDetailViewController'.") }
      }
      
      private init() {}
    }
    
    struct selectCourse: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SelectCourseTableViewController
      
      let bundle = _R.hostingBundle
      let name = "SelectCourse"
      let searchCourseDetailTVC = StoryboardViewControllerResource<SearchCourseDetailTableViewController>(identifier: "SearchCourseDetailTVC")
      let searchCourseTVC = StoryboardViewControllerResource<SearchCourseTableViewController>(identifier: "SearchCourseTVC")
      let selectCourseTVC = StoryboardViewControllerResource<SelectCourseTableViewController>(identifier: "SelectCourseTVC")
      
      func searchCourseDetailTVC(_: Void) -> SearchCourseDetailTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(searchCourseDetailTVC)
      }
      
      func searchCourseTVC(_: Void) -> SearchCourseTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(searchCourseTVC)
      }
      
      func selectCourseTVC(_: Void) -> SelectCourseTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(selectCourseTVC)
      }
      
      static func validate() throws {
        if _R.storyboard.selectCourse().selectCourseTVC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'selectCourseTVC' could not be loaded from storyboard 'SelectCourse' as 'SelectCourseTableViewController'.") }
        if _R.storyboard.selectCourse().searchCourseTVC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'searchCourseTVC' could not be loaded from storyboard 'SelectCourse' as 'SearchCourseTableViewController'.") }
        if _R.storyboard.selectCourse().searchCourseDetailTVC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'searchCourseDetailTVC' could not be loaded from storyboard 'SelectCourse' as 'SearchCourseDetailTableViewController'.") }
      }
      
      private init() {}
    }
    
    struct settings: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let aboutVC = StoryboardViewControllerResource<AboutViewController>(identifier: "AboutVC")
      let bundle = _R.hostingBundle
      let colorChooseTVC = StoryboardViewControllerResource<ColorChooseTableViewController>(identifier: "ColorChooseTVC")
      let detailAccountInfoTVC = StoryboardViewControllerResource<DetailAccountInfoTableViewController>(identifier: "DetailAccountInfoTVC")
      let detailLogInVC = StoryboardViewControllerResource<SaveAccountInfoViewController>(identifier: "DetailLogInVC")
      let name = "Settings"
      let settingsNC = StoryboardViewControllerResource<UINavigationController>(identifier: "SettingsNC")
      let settingsVC = StoryboardViewControllerResource<SettingTableViewController>(identifier: "SettingsVC")
      
      func aboutVC(_: Void) -> AboutViewController? {
        return UIStoryboard(resource: self).instantiateViewController(aboutVC)
      }
      
      func colorChooseTVC(_: Void) -> ColorChooseTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(colorChooseTVC)
      }
      
      func detailAccountInfoTVC(_: Void) -> DetailAccountInfoTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(detailAccountInfoTVC)
      }
      
      func detailLogInVC(_: Void) -> SaveAccountInfoViewController? {
        return UIStoryboard(resource: self).instantiateViewController(detailLogInVC)
      }
      
      func settingsNC(_: Void) -> UINavigationController? {
        return UIStoryboard(resource: self).instantiateViewController(settingsNC)
      }
      
      func settingsVC(_: Void) -> SettingTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(settingsVC)
      }
      
      static func validate() throws {
        if UIImage(named: "slogan.png") == nil { throw ValidationError(description: "[R.swift] Image named 'slogan.png' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIImage(named: "南开") == nil { throw ValidationError(description: "[R.swift] Image named '南开' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIImage(named: "设置") == nil { throw ValidationError(description: "[R.swift] Image named '设置' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIImage(named: "米色白色渐变背景.png") == nil { throw ValidationError(description: "[R.swift] Image named '米色白色渐变背景.png' is used in storyboard 'Settings', but couldn't be loaded.") }
        if _R.storyboard.settings().settingsVC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'settingsVC' could not be loaded from storyboard 'Settings' as 'SettingTableViewController'.") }
        if _R.storyboard.settings().aboutVC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'aboutVC' could not be loaded from storyboard 'Settings' as 'AboutViewController'.") }
        if _R.storyboard.settings().colorChooseTVC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'colorChooseTVC' could not be loaded from storyboard 'Settings' as 'ColorChooseTableViewController'.") }
        if _R.storyboard.settings().detailAccountInfoTVC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'detailAccountInfoTVC' could not be loaded from storyboard 'Settings' as 'DetailAccountInfoTableViewController'.") }
        if _R.storyboard.settings().detailLogInVC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'detailLogInVC' could not be loaded from storyboard 'Settings' as 'SaveAccountInfoViewController'.") }
        if _R.storyboard.settings().settingsNC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'settingsNC' could not be loaded from storyboard 'Settings' as 'UINavigationController'.") }
      }
      
      private init() {}
    }
    
    struct testTimeSearch: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TestTimeTableViewController
      
      let bundle = _R.hostingBundle
      let name = "TestTimeSearch"
      let testTimeTVC = StoryboardViewControllerResource<TestTimeTableViewController>(identifier: "TestTimeTVC")
      
      func testTimeTVC(_: Void) -> TestTimeTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(testTimeTVC)
      }
      
      static func validate() throws {
        if UIImage(named: "building") == nil { throw ValidationError(description: "[R.swift] Image named 'building' is used in storyboard 'TestTimeSearch', but couldn't be loaded.") }
        if _R.storyboard.testTimeSearch().testTimeTVC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'testTimeTVC' could not be loaded from storyboard 'TestTimeSearch' as 'TestTimeTableViewController'.") }
      }
      
      private init() {}
    }
    
    struct today: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let courseDetailTVC = StoryboardViewControllerResource<CourseDetailTableViewController>(identifier: "CourseDetailTVC")
      let name = "Today"
      let todayNC = StoryboardViewControllerResource<UINavigationController>(identifier: "TodayNC")
      
      func courseDetailTVC(_: Void) -> CourseDetailTableViewController? {
        return UIStoryboard(resource: self).instantiateViewController(courseDetailTVC)
      }
      
      func todayNC(_: Void) -> UINavigationController? {
        return UIStoryboard(resource: self).instantiateViewController(todayNC)
      }
      
      static func validate() throws {
        if UIImage(named: "Course") == nil { throw ValidationError(description: "[R.swift] Image named 'Course' is used in storyboard 'Today', but couldn't be loaded.") }
        if UIImage(named: "GeneralTask") == nil { throw ValidationError(description: "[R.swift] Image named 'GeneralTask' is used in storyboard 'Today', but couldn't be loaded.") }
        if UIImage(named: "plus") == nil { throw ValidationError(description: "[R.swift] Image named 'plus' is used in storyboard 'Today', but couldn't be loaded.") }
        if UIImage(named: "今天") == nil { throw ValidationError(description: "[R.swift] Image named '今天' is used in storyboard 'Today', but couldn't be loaded.") }
        if UIImage(named: "Homework") == nil { throw ValidationError(description: "[R.swift] Image named 'Homework' is used in storyboard 'Today', but couldn't be loaded.") }
        if _R.storyboard.today().courseDetailTVC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'courseDetailTVC' could not be loaded from storyboard 'Today' as 'CourseDetailTableViewController'.") }
        if _R.storyboard.today().todayNC() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'todayNC' could not be loaded from storyboard 'Today' as 'UINavigationController'.") }
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}