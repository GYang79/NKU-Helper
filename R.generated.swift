//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(identifier: "April-Sunshine.NKU-Helper") ?? Bundle.main
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 6 files.
  struct file {
    /// Resource file `Colors.realm`.
    static let colorsRealm = Rswift.FileResource(bundle: R.hostingBundle, name: "Colors", pathExtension: "realm")
    /// Resource file `NKU.plist`.
    static let nKUPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "NKU", pathExtension: "plist")
    /// Resource file `RSA.html`.
    static let rSAHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "RSA", pathExtension: "html")
    /// Resource file `slogan.png`.
    static let sloganPng = Rswift.FileResource(bundle: R.hostingBundle, name: "slogan", pathExtension: "png")
    /// Resource file `南开表情包.png`.
    static let 南开表情包Png = Rswift.FileResource(bundle: R.hostingBundle, name: "南开表情包", pathExtension: "png")
    /// Resource file `米色白色渐变背景.png`.
    static let 米色白色渐变背景Png = Rswift.FileResource(bundle: R.hostingBundle, name: "米色白色渐变背景", pathExtension: "png")
    
    /// `bundle.url(forResource: "Colors", withExtension: "realm")`
    static func colorsRealm(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.colorsRealm
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "NKU", withExtension: "plist")`
    static func nKUPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nKUPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "RSA", withExtension: "html")`
    static func rSAHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rSAHtml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "slogan", withExtension: "png")`
    static func sloganPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sloganPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "南开表情包", withExtension: "png")`
    static func 南开表情包Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.南开表情包Png
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "米色白色渐变背景", withExtension: "png")`
    static func 米色白色渐变背景Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.米色白色渐变背景Png
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 30 images.
  struct image {
    /// Image `CheckBox`.
    static let checkBox = Rswift.ImageResource(bundle: R.hostingBundle, name: "CheckBox")
    /// Image `CheckedBox`.
    static let checkedBox = Rswift.ImageResource(bundle: R.hostingBundle, name: "CheckedBox")
    /// Image `Clock`.
    static let clock = Rswift.ImageResource(bundle: R.hostingBundle, name: "Clock")
    /// Image `Course`.
    static let course = Rswift.ImageResource(bundle: R.hostingBundle, name: "Course")
    /// Image `GeneralTask`.
    static let generalTask = Rswift.ImageResource(bundle: R.hostingBundle, name: "GeneralTask")
    /// Image `Homework`.
    static let homework = Rswift.ImageResource(bundle: R.hostingBundle, name: "Homework")
    /// Image `book`.
    static let book = Rswift.ImageResource(bundle: R.hostingBundle, name: "book")
    /// Image `building`.
    static let building = Rswift.ImageResource(bundle: R.hostingBundle, name: "building")
    /// Image `buttonNormal`.
    static let buttonNormal = Rswift.ImageResource(bundle: R.hostingBundle, name: "buttonNormal")
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `classEvaluated`.
    static let classEvaluated = Rswift.ImageResource(bundle: R.hostingBundle, name: "classEvaluated")
    /// Image `classNotEvaluated`.
    static let classNotEvaluated = Rswift.ImageResource(bundle: R.hostingBundle, name: "classNotEvaluated")
    /// Image `downArrow`.
    static let downArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "downArrow")
    /// Image `evaluate`.
    static let evaluate = Rswift.ImageResource(bundle: R.hostingBundle, name: "evaluate")
    /// Image `gradeGet`.
    static let gradeGet = Rswift.ImageResource(bundle: R.hostingBundle, name: "gradeGet")
    /// Image `leftArrow`.
    static let leftArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "leftArrow")
    /// Image `moreFunction`.
    static let moreFunction = Rswift.ImageResource(bundle: R.hostingBundle, name: "moreFunction")
    /// Image `notiCenter`.
    static let notiCenter = Rswift.ImageResource(bundle: R.hostingBundle, name: "notiCenter")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `rightArrow`.
    static let rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "rightArrow")
    /// Image `selectCourse`.
    static let selectCourse = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectCourse")
    /// Image `slogan`.
    static let slogan = Rswift.ImageResource(bundle: R.hostingBundle, name: "slogan")
    /// Image `watch`.
    static let watch = Rswift.ImageResource(bundle: R.hostingBundle, name: "watch")
    /// Image `今天`.
    static let 今天 = Rswift.ImageResource(bundle: R.hostingBundle, name: "今天")
    /// Image `功能`.
    static let 功能 = Rswift.ImageResource(bundle: R.hostingBundle, name: "功能")
    /// Image `南开`.
    static let 南开 = Rswift.ImageResource(bundle: R.hostingBundle, name: "南开")
    /// Image `南开表情包`.
    static let 南开表情包 = Rswift.ImageResource(bundle: R.hostingBundle, name: "南开表情包")
    /// Image `米色白色渐变背景`.
    static let 米色白色渐变背景 = Rswift.ImageResource(bundle: R.hostingBundle, name: "米色白色渐变背景")
    /// Image `设置`.
    static let 设置 = Rswift.ImageResource(bundle: R.hostingBundle, name: "设置")
    /// Image `课程`.
    static let 课程 = Rswift.ImageResource(bundle: R.hostingBundle, name: "课程")
    
    /// `UIImage(named: "CheckBox", bundle: ..., traitCollection: ...)`
    static func checkBox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkBox, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CheckedBox", bundle: ..., traitCollection: ...)`
    static func checkedBox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkedBox, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Clock", bundle: ..., traitCollection: ...)`
    static func clock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Course", bundle: ..., traitCollection: ...)`
    static func course(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.course, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "GeneralTask", bundle: ..., traitCollection: ...)`
    static func generalTask(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.generalTask, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Homework", bundle: ..., traitCollection: ...)`
    static func homework(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homework, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "book", bundle: ..., traitCollection: ...)`
    static func book(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.book, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "building", bundle: ..., traitCollection: ...)`
    static func building(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.building, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "buttonNormal", bundle: ..., traitCollection: ...)`
    static func buttonNormal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.buttonNormal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "classEvaluated", bundle: ..., traitCollection: ...)`
    static func classEvaluated(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.classEvaluated, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "classNotEvaluated", bundle: ..., traitCollection: ...)`
    static func classNotEvaluated(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.classNotEvaluated, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "downArrow", bundle: ..., traitCollection: ...)`
    static func downArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "evaluate", bundle: ..., traitCollection: ...)`
    static func evaluate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.evaluate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gradeGet", bundle: ..., traitCollection: ...)`
    static func gradeGet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gradeGet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "leftArrow", bundle: ..., traitCollection: ...)`
    static func leftArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leftArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "moreFunction", bundle: ..., traitCollection: ...)`
    static func moreFunction(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moreFunction, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "notiCenter", bundle: ..., traitCollection: ...)`
    static func notiCenter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notiCenter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rightArrow", bundle: ..., traitCollection: ...)`
    static func rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "selectCourse", bundle: ..., traitCollection: ...)`
    static func selectCourse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectCourse, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "slogan", bundle: ..., traitCollection: ...)`
    static func slogan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slogan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "watch", bundle: ..., traitCollection: ...)`
    static func watch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.watch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "今天", bundle: ..., traitCollection: ...)`
    static func 今天(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.今天, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "功能", bundle: ..., traitCollection: ...)`
    static func 功能(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.功能, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "南开", bundle: ..., traitCollection: ...)`
    static func 南开(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.南开, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "南开表情包", bundle: ..., traitCollection: ...)`
    static func 南开表情包(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.南开表情包, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "米色白色渐变背景", bundle: ..., traitCollection: ...)`
    static func 米色白色渐变背景(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.米色白色渐变背景, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "设置", bundle: ..., traitCollection: ...)`
    static func 设置(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.设置, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "课程", bundle: ..., traitCollection: ...)`
    static func 课程(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.课程, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `ClassView`.
    static let classView = _R.nib._ClassView()
    /// Nib `TimeScheduleView`.
    static let timeScheduleView = _R.nib._TimeScheduleView()
    /// Nib `WeekdayView`.
    static let weekdayView = _R.nib._WeekdayView()
    
    /// `UINib(name: "ClassView", in: bundle)`
    static func classView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.classView)
    }
    
    /// `UINib(name: "TimeScheduleView", in: bundle)`
    static func timeScheduleView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.timeScheduleView)
    }
    
    /// `UINib(name: "WeekdayView", in: bundle)`
    static func weekdayView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.weekdayView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 32 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AboutCell`.
    static let aboutCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "AboutCell")
    /// Reuse identifier `AccountCell`.
    static let accountCell: Rswift.ReuseIdentifier<AccountTableViewCell> = Rswift.ReuseIdentifier(identifier: "AccountCell")
    /// Reuse identifier `AccountInfoCell`.
    static let accountInfoCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "AccountInfoCell")
    /// Reuse identifier `AddAccountCell`.
    static let addAccountCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "AddAccountCell")
    /// Reuse identifier `ChooseClassTimeTablePreferenceCell`.
    static let chooseClassTimeTablePreferenceCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "ChooseClassTimeTablePreferenceCell")
    /// Reuse identifier `ChooseDueDateCell`.
    static let chooseDueDateCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "ChooseDueDateCell")
    /// Reuse identifier `ChoosePreferredColorCell`.
    static let choosePreferredColorCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "ChoosePreferredColorCell")
    /// Reuse identifier `ClassTimeTablePreferenceCell`.
    static let classTimeTablePreferenceCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "ClassTimeTablePreferenceCell")
    /// Reuse identifier `ClassToEvaluateCell`.
    static let classToEvaluateCell: Rswift.ReuseIdentifier<ClassToEvaluateTableViewCell> = Rswift.ReuseIdentifier(identifier: "ClassToEvaluateCell")
    /// Reuse identifier `CourseColorCell`.
    static let courseColorCell: Rswift.ReuseIdentifier<ColorChooseTableViewCell> = Rswift.ReuseIdentifier(identifier: "CourseColorCell")
    /// Reuse identifier `CourseDetailCell`.
    static let courseDetailCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "CourseDetailCell")
    /// Reuse identifier `CourseTaskCell`.
    static let courseTaskCell: Rswift.ReuseIdentifier<CourseTaskCell> = Rswift.ReuseIdentifier(identifier: "CourseTaskCell")
    /// Reuse identifier `EvaluateCenterCell`.
    static let evaluateCenterCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "EvaluateCenterCell")
    /// Reuse identifier `EvaluateDetailCell`.
    static let evaluateDetailCell: Rswift.ReuseIdentifier<EvaluateDetailTableViewCell> = Rswift.ReuseIdentifier(identifier: "EvaluateDetailCell")
    /// Reuse identifier `EvaluateOpinionCell`.
    static let evaluateOpinionCell: Rswift.ReuseIdentifier<EvaluateOpinionTableViewCell> = Rswift.ReuseIdentifier(identifier: "EvaluateOpinionCell")
    /// Reuse identifier `EvaluateSubmitCell`.
    static let evaluateSubmitCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "EvaluateSubmitCell")
    /// Reuse identifier `GPACalculateMethodCell`.
    static let gPACalculateMethodCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "GPACalculateMethodCell")
    /// Reuse identifier `GPACell`.
    static let gPACell: Rswift.ReuseIdentifier<GPACell> = Rswift.ReuseIdentifier(identifier: "GPACell")
    /// Reuse identifier `GeneralTaskCell`.
    static let generalTaskCell: Rswift.ReuseIdentifier<GeneralTaskCell> = Rswift.ReuseIdentifier(identifier: "GeneralTaskCell")
    /// Reuse identifier `GradeCell`.
    static let gradeCell: Rswift.ReuseIdentifier<GradeCell> = Rswift.ReuseIdentifier(identifier: "GradeCell")
    /// Reuse identifier `GradeShowerCell`.
    static let gradeShowerCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "GradeShowerCell")
    /// Reuse identifier `LogOutCell`.
    static let logOutCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "LogOutCell")
    /// Reuse identifier `MoreFunctionCell`.
    static let moreFunctionCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "MoreFunctionCell")
    /// Reuse identifier `NotiCell`.
    static let notiCell: Rswift.ReuseIdentifier<NotiTableViewCell> = Rswift.ReuseIdentifier(identifier: "NotiCell")
    /// Reuse identifier `NotiCenterCell`.
    static let notiCenterCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "NotiCenterCell")
    /// Reuse identifier `PreferredColorCell`.
    static let preferredColorCell: Rswift.ReuseIdentifier<ColorChooseTableViewCell> = Rswift.ReuseIdentifier(identifier: "PreferredColorCell")
    /// Reuse identifier `SelectCourseCenterCell`.
    static let selectCourseCenterCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "SelectCourseCenterCell")
    /// Reuse identifier `SupportGroupCell`.
    static let supportGroupCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "SupportGroupCell")
    /// Reuse identifier `TaskColorCell`.
    static let taskColorCell: Rswift.ReuseIdentifier<ColorChooseTableViewCell> = Rswift.ReuseIdentifier(identifier: "TaskColorCell")
    /// Reuse identifier `TestTimeCell`.
    static let testTimeCell: Rswift.ReuseIdentifier<TestTimeTableViewCell> = Rswift.ReuseIdentifier(identifier: "TestTimeCell")
    /// Reuse identifier `TestTimeSearchCell`.
    static let testTimeSearchCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "TestTimeSearchCell")
    /// Reuse identifier `TodayCourseCell`.
    static let todayCourseCell: Rswift.ReuseIdentifier<TodayCourseCell> = Rswift.ReuseIdentifier(identifier: "TodayCourseCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 10 view controllers.
  struct segue {
    /// This struct is generated for `ClassTimeViewController`, and contains static references to 2 segues.
    struct classTimeViewController {
      /// Segue identifier `Login`.
      static let login: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ClassTimeViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "Login")
      /// Segue identifier `ShowCourseDetail`.
      static let showCourseDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ClassTimeViewController, CourseDetailTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowCourseDetail")
      
      /// Optionally returns a typed version of segue `Login`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func login(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ClassTimeViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.classTimeViewController.login, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowCourseDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showCourseDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ClassTimeViewController, CourseDetailTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.classTimeViewController.showCourseDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `CourseDetailTableViewController`, and contains static references to 1 segues.
    struct courseDetailTableViewController {
      /// Segue identifier `AddTask`.
      static let addTask: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CourseDetailTableViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "AddTask")
      
      /// Optionally returns a typed version of segue `AddTask`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func addTask(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CourseDetailTableViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.courseDetailTableViewController.addTask, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `EvaluateTableViewController`, and contains static references to 2 segues.
    struct evaluateTableViewController {
      /// Segue identifier `Login`.
      static let login: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, EvaluateTableViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "Login")
      /// Segue identifier `ShowEvaluateDetail`.
      static let showEvaluateDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, EvaluateTableViewController, EvaluateDetailTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowEvaluateDetail")
      
      /// Optionally returns a typed version of segue `Login`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func login(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, EvaluateTableViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.evaluateTableViewController.login, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowEvaluateDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showEvaluateDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, EvaluateTableViewController, EvaluateDetailTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.evaluateTableViewController.showEvaluateDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `FunctionTableViewController`, and contains static references to 4 segues.
    struct functionTableViewController {
      /// Segue identifier `ShowEvaluate`.
      static let showEvaluate: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FunctionTableViewController, EvaluateTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowEvaluate")
      /// Segue identifier `ShowGrade`.
      static let showGrade: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FunctionTableViewController, GradeShowerTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowGrade")
      /// Segue identifier `ShowNotiCenter`.
      static let showNotiCenter: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FunctionTableViewController, NotiCenterTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowNotiCenter")
      /// Segue identifier `ShowTestTime`.
      static let showTestTime: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FunctionTableViewController, TestTimeTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowTestTime")
      
      /// Optionally returns a typed version of segue `ShowEvaluate`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showEvaluate(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FunctionTableViewController, EvaluateTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.functionTableViewController.showEvaluate, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowGrade`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGrade(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FunctionTableViewController, GradeShowerTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.functionTableViewController.showGrade, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowNotiCenter`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showNotiCenter(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FunctionTableViewController, NotiCenterTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.functionTableViewController.showNotiCenter, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowTestTime`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showTestTime(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FunctionTableViewController, TestTimeTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.functionTableViewController.showTestTime, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `GradeShowerTableViewController`, and contains static references to 2 segues.
    struct gradeShowerTableViewController {
      /// Segue identifier `Login`.
      static let login: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, GradeShowerTableViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "Login")
      /// Segue identifier `ShowGPACalculateMethod`.
      static let showGPACalculateMethod: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, GradeShowerTableViewController, GPACalculateMethodTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowGPACalculateMethod")
      
      /// Optionally returns a typed version of segue `Login`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func login(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, GradeShowerTableViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.gradeShowerTableViewController.login, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowGPACalculateMethod`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGPACalculateMethod(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, GradeShowerTableViewController, GPACalculateMethodTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.gradeShowerTableViewController.showGPACalculateMethod, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `NewTaskTableViewController`, and contains static references to 1 segues.
    struct newTaskTableViewController {
      /// Segue identifier `ChooseDueDate`.
      static let chooseDueDate: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, NewTaskTableViewController, DatePickerTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ChooseDueDate")
      
      /// Optionally returns a typed version of segue `ChooseDueDate`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func chooseDueDate(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, NewTaskTableViewController, DatePickerTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.newTaskTableViewController.chooseDueDate, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `NotiCenterTableViewController`, and contains static references to 1 segues.
    struct notiCenterTableViewController {
      /// Segue identifier `ShowNotiDetail`.
      static let showNotiDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, NotiCenterTableViewController, NotiDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowNotiDetail")
      
      /// Optionally returns a typed version of segue `ShowNotiDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showNotiDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, NotiCenterTableViewController, NotiDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.notiCenterTableViewController.showNotiDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SettingTableViewController`, and contains static references to 4 segues.
    struct settingTableViewController {
      /// Segue identifier `ShowAbout`.
      static let showAbout: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingTableViewController, AboutViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowAbout")
      /// Segue identifier `ShowChoosePreferredColor`.
      static let showChoosePreferredColor: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingTableViewController, ColorChooseTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowChoosePreferredColor")
      /// Segue identifier `ShowClassTimePreference`.
      static let showClassTimePreference: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingTableViewController, ClassTimePreferenceTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowClassTimePreference")
      /// Segue identifier `ShowDetailAccountInfo`.
      static let showDetailAccountInfo: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingTableViewController, DetailAccountInfoTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowDetailAccountInfo")
      
      /// Optionally returns a typed version of segue `ShowAbout`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showAbout(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingTableViewController, AboutViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingTableViewController.showAbout, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowChoosePreferredColor`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showChoosePreferredColor(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingTableViewController, ColorChooseTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingTableViewController.showChoosePreferredColor, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowClassTimePreference`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showClassTimePreference(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingTableViewController, ClassTimePreferenceTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingTableViewController.showClassTimePreference, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowDetailAccountInfo`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showDetailAccountInfo(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingTableViewController, DetailAccountInfoTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingTableViewController.showDetailAccountInfo, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `TestTimeTableViewController`, and contains static references to 1 segues.
    struct testTimeTableViewController {
      /// Segue identifier `Login`.
      static let login: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TestTimeTableViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "Login")
      
      /// Optionally returns a typed version of segue `Login`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func login(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TestTimeTableViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.testTimeTableViewController.login, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `TodayViewController`, and contains static references to 3 segues.
    struct todayViewController {
      /// Segue identifier `AddTask`.
      static let addTask: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TodayViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "AddTask")
      /// Segue identifier `Login`.
      static let login: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TodayViewController, AccountLogInViewController> = Rswift.StoryboardSegueIdentifier(identifier: "Login")
      /// Segue identifier `ShowCourseDetail`.
      static let showCourseDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TodayViewController, CourseDetailTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowCourseDetail")
      
      /// Optionally returns a typed version of segue `AddTask`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func addTask(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TodayViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.todayViewController.addTask, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `Login`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func login(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TodayViewController, AccountLogInViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.todayViewController.login, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowCourseDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showCourseDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TodayViewController, CourseDetailTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.todayViewController.showCourseDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 11 storyboards.
  struct storyboard {
    /// Storyboard `ClassTime`.
    static let classTime = _R.storyboard.classTime()
    /// Storyboard `Evaluate`.
    static let evaluate = _R.storyboard.evaluate()
    /// Storyboard `Function`.
    static let function = _R.storyboard.function()
    /// Storyboard `Grade`.
    static let grade = _R.storyboard.grade()
    /// Storyboard `Launch Screen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LogIn`.
    static let logIn = _R.storyboard.logIn()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `NotiCenter`.
    static let notiCenter = _R.storyboard.notiCenter()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `TestTimeSearch`.
    static let testTimeSearch = _R.storyboard.testTimeSearch()
    /// Storyboard `Today`.
    static let today = _R.storyboard.today()
    
    /// `UIStoryboard(name: "ClassTime", bundle: ...)`
    static func classTime(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.classTime)
    }
    
    /// `UIStoryboard(name: "Evaluate", bundle: ...)`
    static func evaluate(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.evaluate)
    }
    
    /// `UIStoryboard(name: "Function", bundle: ...)`
    static func function(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.function)
    }
    
    /// `UIStoryboard(name: "Grade", bundle: ...)`
    static func grade(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.grade)
    }
    
    /// `UIStoryboard(name: "Launch Screen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "LogIn", bundle: ...)`
    static func logIn(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.logIn)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "NotiCenter", bundle: ...)`
    static func notiCenter(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.notiCenter)
    }
    
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    
    /// `UIStoryboard(name: "TestTimeSearch", bundle: ...)`
    static func testTimeSearch(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.testTimeSearch)
    }
    
    /// `UIStoryboard(name: "Today", bundle: ...)`
    static func today(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.today)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 0 localization keys.
    struct localizable {
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _ClassView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ClassView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ClassView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ClassView
      }
      
      fileprivate init() {}
    }
    
    struct _TimeScheduleView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TimeScheduleView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TimeScheduleView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TimeScheduleView
      }
      
      fileprivate init() {}
    }
    
    struct _WeekdayView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WeekdayView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> WeekdayView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeekdayView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try notiCenter.validate()
      try classTime.validate()
      try logIn.validate()
      try settings.validate()
      try evaluate.validate()
      try today.validate()
      try grade.validate()
      try function.validate()
      try testTimeSearch.validate()
    }
    
    struct classTime: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let classTimeNC = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "ClassTimeNC")
      let classTimeVC = StoryboardViewControllerResource<ClassTimeViewController>(identifier: "ClassTimeVC")
      let name = "ClassTime"
      
      func classTimeNC(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: classTimeNC)
      }
      
      func classTimeVC(_: Void = ()) -> ClassTimeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: classTimeVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "课程") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '课程' is used in storyboard 'ClassTime', but couldn't be loaded.") }
        if _R.storyboard.classTime().classTimeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'classTimeVC' could not be loaded from storyboard 'ClassTime' as 'ClassTimeViewController'.") }
        if _R.storyboard.classTime().classTimeNC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'classTimeNC' could not be loaded from storyboard 'ClassTime' as 'UIKit.UINavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct evaluate: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = EvaluateTableViewController
      
      let bundle = R.hostingBundle
      let evaluateDetailTVC = StoryboardViewControllerResource<EvaluateDetailTableViewController>(identifier: "EvaluateDetailTVC")
      let evaluateTVC = StoryboardViewControllerResource<EvaluateTableViewController>(identifier: "EvaluateTVC")
      let name = "Evaluate"
      
      func evaluateDetailTVC(_: Void = ()) -> EvaluateDetailTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: evaluateDetailTVC)
      }
      
      func evaluateTVC(_: Void = ()) -> EvaluateTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: evaluateTVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "classEvaluated") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'classEvaluated' is used in storyboard 'Evaluate', but couldn't be loaded.") }
        if _R.storyboard.evaluate().evaluateTVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'evaluateTVC' could not be loaded from storyboard 'Evaluate' as 'EvaluateTableViewController'.") }
        if _R.storyboard.evaluate().evaluateDetailTVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'evaluateDetailTVC' could not be loaded from storyboard 'Evaluate' as 'EvaluateDetailTableViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct function: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let functionNC = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "FunctionNC")
      let functionVC = StoryboardViewControllerResource<FunctionTableViewController>(identifier: "FunctionVC")
      let name = "Function"
      
      func functionNC(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: functionNC)
      }
      
      func functionVC(_: Void = ()) -> FunctionTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: functionVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "notiCenter") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'notiCenter' is used in storyboard 'Function', but couldn't be loaded.") }
        if UIKit.UIImage(named: "moreFunction") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'moreFunction' is used in storyboard 'Function', but couldn't be loaded.") }
        if UIKit.UIImage(named: "evaluate") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'evaluate' is used in storyboard 'Function', but couldn't be loaded.") }
        if UIKit.UIImage(named: "gradeGet") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gradeGet' is used in storyboard 'Function', but couldn't be loaded.") }
        if UIKit.UIImage(named: "功能") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '功能' is used in storyboard 'Function', but couldn't be loaded.") }
        if UIKit.UIImage(named: "selectCourse") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'selectCourse' is used in storyboard 'Function', but couldn't be loaded.") }
        if UIKit.UIImage(named: "book") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'book' is used in storyboard 'Function', but couldn't be loaded.") }
        if _R.storyboard.function().functionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'functionVC' could not be loaded from storyboard 'Function' as 'FunctionTableViewController'.") }
        if _R.storyboard.function().functionNC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'functionNC' could not be loaded from storyboard 'Function' as 'UIKit.UINavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct grade: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = GradeShowerTableViewController
      
      let bundle = R.hostingBundle
      let gradeShowerTVC = StoryboardViewControllerResource<GradeShowerTableViewController>(identifier: "GradeShowerTVC")
      let name = "Grade"
      
      func gradeShowerTVC(_: Void = ()) -> GradeShowerTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: gradeShowerTVC)
      }
      
      static func validate() throws {
        if _R.storyboard.grade().gradeShowerTVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'gradeShowerTVC' could not be loaded from storyboard 'Grade' as 'GradeShowerTableViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "Launch Screen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "米色白色渐变背景.png") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '米色白色渐变背景.png' is used in storyboard 'Launch Screen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "南开表情包.png") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '南开表情包.png' is used in storyboard 'Launch Screen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "slogan.png") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'slogan.png' is used in storyboard 'Launch Screen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct logIn: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let logInVC = StoryboardViewControllerResource<LogInViewController>(identifier: "LogInVC")
      let name = "LogIn"
      
      func logInVC(_: Void = ()) -> LogInViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: logInVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "米色白色渐变背景.png") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '米色白色渐变背景.png' is used in storyboard 'LogIn', but couldn't be loaded.") }
        if UIKit.UIImage(named: "slogan.png") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'slogan.png' is used in storyboard 'LogIn', but couldn't be loaded.") }
        if _R.storyboard.logIn().logInVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'logInVC' could not be loaded from storyboard 'LogIn' as 'LogInViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    struct notiCenter: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NotiCenterTableViewController
      
      let bundle = R.hostingBundle
      let name = "NotiCenter"
      let notiCenterTVC = StoryboardViewControllerResource<NotiCenterTableViewController>(identifier: "NotiCenterTVC")
      let notiDetailVC = StoryboardViewControllerResource<NotiDetailViewController>(identifier: "NotiDetailVC")
      
      func notiCenterTVC(_: Void = ()) -> NotiCenterTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notiCenterTVC)
      }
      
      func notiDetailVC(_: Void = ()) -> NotiDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notiDetailVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "南开") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '南开' is used in storyboard 'NotiCenter', but couldn't be loaded.") }
        if _R.storyboard.notiCenter().notiCenterTVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notiCenterTVC' could not be loaded from storyboard 'NotiCenter' as 'NotiCenterTableViewController'.") }
        if _R.storyboard.notiCenter().notiDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notiDetailVC' could not be loaded from storyboard 'NotiCenter' as 'NotiDetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct settings: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let aboutVC = StoryboardViewControllerResource<AboutViewController>(identifier: "AboutVC")
      let bundle = R.hostingBundle
      let colorChooseTVC = StoryboardViewControllerResource<ColorChooseTableViewController>(identifier: "ColorChooseTVC")
      let detailAccountInfoTVC = StoryboardViewControllerResource<DetailAccountInfoTableViewController>(identifier: "DetailAccountInfoTVC")
      let detailLogInVC = StoryboardViewControllerResource<AccountLogInViewController>(identifier: "DetailLogInVC")
      let name = "Settings"
      let settingsNC = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "SettingsNC")
      let settingsVC = StoryboardViewControllerResource<SettingTableViewController>(identifier: "SettingsVC")
      
      func aboutVC(_: Void = ()) -> AboutViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aboutVC)
      }
      
      func colorChooseTVC(_: Void = ()) -> ColorChooseTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: colorChooseTVC)
      }
      
      func detailAccountInfoTVC(_: Void = ()) -> DetailAccountInfoTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailAccountInfoTVC)
      }
      
      func detailLogInVC(_: Void = ()) -> AccountLogInViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailLogInVC)
      }
      
      func settingsNC(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsNC)
      }
      
      func settingsVC(_: Void = ()) -> SettingTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "slogan.png") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'slogan.png' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "南开") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '南开' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "设置") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '设置' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "米色白色渐变背景.png") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '米色白色渐变背景.png' is used in storyboard 'Settings', but couldn't be loaded.") }
        if _R.storyboard.settings().settingsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsVC' could not be loaded from storyboard 'Settings' as 'SettingTableViewController'.") }
        if _R.storyboard.settings().detailAccountInfoTVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailAccountInfoTVC' could not be loaded from storyboard 'Settings' as 'DetailAccountInfoTableViewController'.") }
        if _R.storyboard.settings().settingsNC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsNC' could not be loaded from storyboard 'Settings' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.settings().detailLogInVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailLogInVC' could not be loaded from storyboard 'Settings' as 'AccountLogInViewController'.") }
        if _R.storyboard.settings().aboutVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aboutVC' could not be loaded from storyboard 'Settings' as 'AboutViewController'.") }
        if _R.storyboard.settings().colorChooseTVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'colorChooseTVC' could not be loaded from storyboard 'Settings' as 'ColorChooseTableViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct testTimeSearch: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TestTimeTableViewController
      
      let bundle = R.hostingBundle
      let name = "TestTimeSearch"
      let testTimeTVC = StoryboardViewControllerResource<TestTimeTableViewController>(identifier: "TestTimeTVC")
      
      func testTimeTVC(_: Void = ()) -> TestTimeTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: testTimeTVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "building") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'building' is used in storyboard 'TestTimeSearch', but couldn't be loaded.") }
        if _R.storyboard.testTimeSearch().testTimeTVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'testTimeTVC' could not be loaded from storyboard 'TestTimeSearch' as 'TestTimeTableViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct today: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let courseDetailTVC = StoryboardViewControllerResource<CourseDetailTableViewController>(identifier: "CourseDetailTVC")
      let name = "Today"
      let todayNC = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "TodayNC")
      
      func courseDetailTVC(_: Void = ()) -> CourseDetailTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: courseDetailTVC)
      }
      
      func todayNC(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: todayNC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "今天") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '今天' is used in storyboard 'Today', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Course") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Course' is used in storyboard 'Today', but couldn't be loaded.") }
        if UIKit.UIImage(named: "GeneralTask") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'GeneralTask' is used in storyboard 'Today', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Homework") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Homework' is used in storyboard 'Today', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus' is used in storyboard 'Today', but couldn't be loaded.") }
        if _R.storyboard.today().courseDetailTVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'courseDetailTVC' could not be loaded from storyboard 'Today' as 'CourseDetailTableViewController'.") }
        if _R.storyboard.today().todayNC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'todayNC' could not be loaded from storyboard 'Today' as 'UIKit.UINavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}